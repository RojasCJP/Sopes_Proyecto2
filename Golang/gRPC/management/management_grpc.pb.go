// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagmentClient is the client API for UserManagment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagmentClient interface {
	CreateNewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error)
}

type userManagmentClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagmentClient(cc grpc.ClientConnInterface) UserManagmentClient {
	return &userManagmentClient{cc}
}

func (c *userManagmentClient) CreateNewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/management.UserManagment/CreateNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagmentServer is the server API for UserManagment service.
// All implementations must embed UnimplementedUserManagmentServer
// for forward compatibility
type UserManagmentServer interface {
	CreateNewUser(context.Context, *NewUser) (*User, error)
	mustEmbedUnimplementedUserManagmentServer()
}

// UnimplementedUserManagmentServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagmentServer struct {
}

func (UnimplementedUserManagmentServer) CreateNewUser(context.Context, *NewUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewUser not implemented")
}
func (UnimplementedUserManagmentServer) mustEmbedUnimplementedUserManagmentServer() {}

// UnsafeUserManagmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagmentServer will
// result in compilation errors.
type UnsafeUserManagmentServer interface {
	mustEmbedUnimplementedUserManagmentServer()
}

func RegisterUserManagmentServer(s grpc.ServiceRegistrar, srv UserManagmentServer) {
	s.RegisterService(&UserManagment_ServiceDesc, srv)
}

func _UserManagment_CreateNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagmentServer).CreateNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.UserManagment/CreateNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagmentServer).CreateNewUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagment_ServiceDesc is the grpc.ServiceDesc for UserManagment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.UserManagment",
	HandlerType: (*UserManagmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewUser",
			Handler:    _UserManagment_CreateNewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/management.proto",
}
